name: Conditional Container Builder with Fallback
description: Build if trigger conditions are met, else use fallback image
branding:
  icon: package
  color: blue
inputs:
  package:
    required: true
    description: Package name; e.g. backend, frontend
  repository:
    default: ${{ github.repository }}
    description: Non-default repo to clone
  tag:
    required: true
    description: Default tag; e.g. pr#, test, prod
  tag_fallback:
    description: Where to pull default images from, e.g. prod, test
  triggers:
    default: "('.')"
    description: Paths used to trigger a build, e.g. ('./backend/', './frontend/)
  token:
    required: true
    description: Default github token (secrets.GITHUB_TOKEN)
  diff_branch:
    default: ${{ github.event.repository.default_branch }}
    description: Branch to diff against
outputs:
  build:
    description: True = build has changed
    value: ${{ steps.check.outputs.build }}
runs:
  using: composite
  steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}

    # Check triggers to see if a build is required; always build if inputs.tag_fallback not provided or doesn't exist
    - name: Check and process modified files
      # Returns jobs.check.outputs.build as a boolean (true/false)
      shell: bash
      id: check
      run: |
        # Fetch default branch to diff against
        git fetch origin ${{ inputs.diff_branch }}

        # Trigger build if diff matches any triggers
        TRIGGERS=${{ inputs.triggers }}
        while read -r check; do
          for t in "${TRIGGERS[@]}"; do
            if [[ "${check}" =~ "${t}" ]]; then
                # Output build=true for next steps
                echo "build=true" >> $GITHUB_OUTPUT
                echo -e "${t}\n --> ${check}\n"
                exit 0
            fi
          done
        done < <(git diff origin/${{ inputs.diff_branch }} --name-only)

        # Check that fallback tag exists, otherwise build
        TOKEN=$(curl -s https://ghcr.io/token\?scope\="repository:${{ github.repository }}/${{ inputs.package }}:pull" | jq -r .token)
        URL="https://ghcr.io/v2/${{ github.repository }}/${{ inputs.package }}/manifests/${{ inputs.tag_fallback }}"
        if [ $(curl -ILso /dev/null -w "%{http_code}" -H "Authorization: Bearer ${TOKEN}" "${URL}") -ne 200 ]
        then
            # Output build=true for next steps
            echo "build=true" >> $GITHUB_OUTPUT
            echo -e "\nBuilding image, since no fallback is available!"
            exit 0
        fi

        # If at this point, no build is required
        echo "build=false" >> $GITHUB_OUTPUT
        echo "Container build not required"

    # If a build is not required, reuse a previous image
    - name: Recycle/retag Previous Images
      uses: shrink/actions-docker-registry-tag@v3
      if: steps.check.outputs.build != 'true'
      with:
        registry: ghcr.io
        repository: ${{ github.repository }}/${{ inputs.package }}
        target: ${{ inputs.tag_fallback }}
        tags: ${{ inputs.tag }}

    # If a build is required, then build and push!
    - uses: actions/checkout@v3
      with:
        # Check out build repo
        repository: ${{ inputs.repository }}

    - name: Set up Docker Buildx
      if: steps.check.outputs.build == 'true'
      uses: docker/setup-buildx-action@v2

    - name: Log in to the Container registry
      if: steps.check.outputs.build == 'true'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.token }}

    - name: Build and push ${{ inputs.package }} Docker image
      if: steps.check.outputs.build == 'true'
      uses: docker/build-push-action@v3
      with:
        context: ./${{ inputs.package }}/
        push: true
        tags: ghcr.io/${{ github.repository }}/${{ inputs.package }}:${{ inputs.tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Checkout Action repo to pass tests
      uses: actions/checkout@v3
