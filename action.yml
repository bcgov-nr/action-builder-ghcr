name: Conditional Container Builder with Fallback
description: Build if trigger conditions are met, else use fallback image
branding:
  icon: package
  color: blue

inputs:
  ### Required
  package:
    description: Package name; e.g. backend, frontend
    required: true
  tag:
    description: Default tag; e.g. pr#, test, prod
    required: true
  token:
    description: Default github token or personal access token
    required: true

  ### Typical / recommended
  tag_fallback:
    description: Where to pull default images from; e.g. prod, test
  triggers:
    description: Paths used to trigger a build; e.g. ('./backend/', './frontend/)
  build_context:
    description: Build context, not required for self-contained package/default directory
  build_file:
    description: Dockerfile with path, not required for self-contained package/default directory

  ### Usually a bad idea / not recommended
  diff_branch:
    default: ${{ github.event.repository.default_branch }}
    description: Branch to diff against
  repository:
    default: ${{ github.repository }}
    description: Non-default repo to clone

outputs:
  build:
    description: True if a build has been generated
    value: ${{ steps.build.outputs.triggered }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v3
      with:
        # Check out build repo
        repository: ${{ inputs.repository }}

    # Process variables and inputs
    - id: vars
      shell: bash
      run: |
        # Inputs and variables

        # Use package folder as build_context unless an override has been provided
        if [ -z ${{ inputs.build_context }} ]; then
          echo "build_context=${{ inputs.package }}" >> $GITHUB_OUTPUT
        else
          echo "build_context=${{ inputs.build_context }}" >> $GITHUB_OUTPUT
        fi

        # Use inputs.package/Dockerfile as build_file unless an override has been provided
        if [ -z ${{ inputs.build_file }} ]; then
          echo "build_file=${{ inputs.package }}/Dockerfile" >> $GITHUB_OUTPUT
        else
          echo "build_file=${{ inputs.build_file }}" >> $GITHUB_OUTPUT
        fi

        # Bug - Docker build hates images with capital letters
        TAGS=$( echo "ghcr.io/${{ github.repository }}/${{ inputs.package }}:${{ inputs.tag }}" | tr '[:upper:]' '[:lower:]' )
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT

    # Check if a build is required (steps.build.outputs.triggered=true|false)
    - name: Check for builds
      shell: bash
      id: build
      run: |
        # Check for builds

        # Build if an override repository was provided
        if [ "${{ inputs.repository }}" != "${{ github.repository }}" ]; then
          echo "Build triggered on override repository"
          echo "triggered=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Build if no tag_fallback or no triggers
        if [ -z "${{ inputs.tag_fallback }}" ]||[ -z "${{ inputs.triggers }}" ]; then
          echo "Build triggered with possible reasons:"
          echo "  a) tag_fallback provided"
          echo "  b) triggers not provided"
          echo "triggered=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Build if tag_fallback is no good (requires a valid container)
        CHECK=$(docker buildx imagetools inspect ghcr.io/${{ inputs.repository }}/${{ inputs.package }}:${{ inputs.tag_fallback }} 2>&1 | grep -i "^Name:")
        if [ "${CHECK}" == "" ]; then
          # Output triggered=true for next steps
          echo "Build triggered.  Fallback tag (tag_fallback) not usable."
          echo "Manifest checked for: ghcr.io/${{ inputs.repository }}/${{ inputs.package }}:${{ inputs.tag_fallback }}"
          echo "triggered=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Build if changed files (git diff) match triggers
        TRIGGERS=${{ inputs.triggers }}
        git fetch origin ${{ inputs.diff_branch }}
        while read -r check; do
          for t in "${TRIGGERS[@]}"; do
            if [[ "${check}" =~ "${t}" ]]; then
                # Output triggered=true for next steps
                echo "Build triggered based on git diff"
                echo -e "${t}\n --> ${check}"
                echo "triggered=true" >> $GITHUB_OUTPUT
                exit 0
            fi
          done
        done < <(git diff origin/${{ inputs.diff_branch }} --name-only)

        # If at this point, no build is required
        echo "Container build not required"
        echo "triggered=false" >> $GITHUB_OUTPUT

    # If a build is not required, reuse a previous image
    - name: Recycle/retag Previous Images
      uses: shrink/actions-docker-registry-tag@v3
      if: steps.build.outputs.triggered != 'true'
      with:
        registry: ghcr.io
        repository: ${{ inputs.repository }}/${{ inputs.package }}
        target: ${{ inputs.tag_fallback }}
        tags: ${{ inputs.tag }}

    # If a build is required, then build and push!
    - name: Set up Docker Buildx
      if: steps.build.outputs.triggered == 'true'
      uses: docker/setup-buildx-action@v2

    - name: Log in to the Container registry
      if: steps.build.outputs.triggered == 'true'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.token }}

    - name: Build and push ${{ inputs.package }} Docker image
      if: steps.build.outputs.triggered == 'true'
      uses: docker/build-push-action@v4
      with:
        context: ${{ steps.vars.outputs.build_context }}
        file: ${{ steps.vars.outputs.build_file }}
        push: true
        tags: ${{ steps.vars.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Checkout Action repo to pass tests
      uses: actions/checkout@v3
